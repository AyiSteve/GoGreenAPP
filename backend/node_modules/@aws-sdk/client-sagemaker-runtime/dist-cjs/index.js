'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var eventstreamSerdeConfigResolver = require('@smithy/eventstream-serde-config-resolver');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "sagemaker",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class SageMakerRuntimeClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = eventstreamSerdeConfigResolver.resolveEventStreamSerdeConfig(_config_6);
        const _config_8 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_7);
        const _config_9 = resolveRuntimeExtensions(_config_8, configuration?.extensions || []);
        this.config = _config_9;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultSageMakerRuntimeHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class SageMakerRuntimeServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SageMakerRuntimeServiceException.prototype);
    }
}

class InternalDependencyException extends SageMakerRuntimeServiceException {
    name = "InternalDependencyException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "InternalDependencyException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalDependencyException.prototype);
        this.Message = opts.Message;
    }
}
class InternalFailure extends SageMakerRuntimeServiceException {
    name = "InternalFailure";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "InternalFailure",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalFailure.prototype);
        this.Message = opts.Message;
    }
}
class ModelError extends SageMakerRuntimeServiceException {
    name = "ModelError";
    $fault = "client";
    Message;
    OriginalStatusCode;
    OriginalMessage;
    LogStreamArn;
    constructor(opts) {
        super({
            name: "ModelError",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ModelError.prototype);
        this.Message = opts.Message;
        this.OriginalStatusCode = opts.OriginalStatusCode;
        this.OriginalMessage = opts.OriginalMessage;
        this.LogStreamArn = opts.LogStreamArn;
    }
}
class ModelNotReadyException extends SageMakerRuntimeServiceException {
    name = "ModelNotReadyException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ModelNotReadyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ModelNotReadyException.prototype);
        this.Message = opts.Message;
    }
}
class ServiceUnavailable extends SageMakerRuntimeServiceException {
    name = "ServiceUnavailable";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "ServiceUnavailable",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceUnavailable.prototype);
        this.Message = opts.Message;
    }
}
class ValidationError extends SageMakerRuntimeServiceException {
    name = "ValidationError";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ValidationError",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationError.prototype);
        this.Message = opts.Message;
    }
}
class InternalStreamFailure extends SageMakerRuntimeServiceException {
    name = "InternalStreamFailure";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "InternalStreamFailure",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalStreamFailure.prototype);
        this.Message = opts.Message;
    }
}
class ModelStreamError extends SageMakerRuntimeServiceException {
    name = "ModelStreamError";
    $fault = "client";
    Message;
    ErrorCode;
    constructor(opts) {
        super({
            name: "ModelStreamError",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ModelStreamError.prototype);
        this.Message = opts.Message;
        this.ErrorCode = opts.ErrorCode;
    }
}
exports.ResponseStream = void 0;
(function (ResponseStream) {
    ResponseStream.visit = (value, visitor) => {
        if (value.PayloadPart !== undefined)
            return visitor.PayloadPart(value.PayloadPart);
        if (value.ModelStreamError !== undefined)
            return visitor.ModelStreamError(value.ModelStreamError);
        if (value.InternalStreamFailure !== undefined)
            return visitor.InternalStreamFailure(value.InternalStreamFailure);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.ResponseStream || (exports.ResponseStream = {}));
const InvokeEndpointInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Body && { Body: smithyClient.SENSITIVE_STRING }),
    ...(obj.CustomAttributes && { CustomAttributes: smithyClient.SENSITIVE_STRING }),
});
const InvokeEndpointOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Body && { Body: smithyClient.SENSITIVE_STRING }),
    ...(obj.CustomAttributes && { CustomAttributes: smithyClient.SENSITIVE_STRING }),
});
const InvokeEndpointAsyncInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CustomAttributes && { CustomAttributes: smithyClient.SENSITIVE_STRING }),
});
const InvokeEndpointWithResponseStreamInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Body && { Body: smithyClient.SENSITIVE_STRING }),
    ...(obj.CustomAttributes && { CustomAttributes: smithyClient.SENSITIVE_STRING }),
});
const PayloadPartFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Bytes && { Bytes: smithyClient.SENSITIVE_STRING }),
});
const ResponseStreamFilterSensitiveLog = (obj) => {
    if (obj.PayloadPart !== undefined)
        return { PayloadPart: PayloadPartFilterSensitiveLog(obj.PayloadPart) };
    if (obj.ModelStreamError !== undefined)
        return { ModelStreamError: obj.ModelStreamError };
    if (obj.InternalStreamFailure !== undefined)
        return { InternalStreamFailure: obj.InternalStreamFailure };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const InvokeEndpointWithResponseStreamOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Body && { Body: "STREAMING_CONTENT" }),
    ...(obj.CustomAttributes && { CustomAttributes: smithyClient.SENSITIVE_STRING }),
});

const se_InvokeEndpointCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = smithyClient.map({}, smithyClient.isSerializableHeaderValue, {
        [_ct]: input[_CT] || "application/octet-stream",
        [_a]: input[_A],
        [_xasca]: input[_CA],
        [_xastm]: input[_TM],
        [_xastv]: input[_TV],
        [_xastch]: input[_TCH],
        [_xasii]: input[_II],
        [_xasee]: input[_EE],
        [_xasic]: input[_ICN],
        [_xassi]: input[_SI],
    });
    b.bp("/endpoints/{EndpointName}/invocations");
    b.p("EndpointName", () => input.EndpointName, "{EndpointName}", false);
    let body;
    if (input.Body !== undefined) {
        body = input.Body;
    }
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_InvokeEndpointAsyncCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = smithyClient.map({}, smithyClient.isSerializableHeaderValue, {
        [_xasct]: input[_CT],
        [_xasa]: input[_A],
        [_xasca]: input[_CA],
        [_xasii]: input[_II],
        [_xasi]: input[_IL],
        [_xasr]: [() => smithyClient.isSerializableHeaderValue(input[_RTTLS]), () => input[_RTTLS].toString()],
        [_xasi_]: [() => smithyClient.isSerializableHeaderValue(input[_ITS]), () => input[_ITS].toString()],
    });
    b.bp("/endpoints/{EndpointName}/async-invocations");
    b.p("EndpointName", () => input.EndpointName, "{EndpointName}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_InvokeEndpointWithResponseStreamCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = smithyClient.map({}, smithyClient.isSerializableHeaderValue, {
        [_ct]: input[_CT] || "application/octet-stream",
        [_xasa]: input[_A],
        [_xasca]: input[_CA],
        [_xastv]: input[_TV],
        [_xastch]: input[_TCH],
        [_xasii]: input[_II],
        [_xasic]: input[_ICN],
        [_xassi]: input[_SI],
    });
    b.bp("/endpoints/{EndpointName}/invocations-response-stream");
    b.p("EndpointName", () => input.EndpointName, "{EndpointName}", false);
    let body;
    if (input.Body !== undefined) {
        body = input.Body;
    }
    b.m("POST").h(headers).b(body);
    return b.build();
};
const de_InvokeEndpointCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_CT]: [, output.headers[_ct]],
        [_IPV]: [, output.headers[_xaipv]],
        [_CA]: [, output.headers[_xasca]],
        [_NSI]: [, output.headers[_xasnsi]],
        [_CSI]: [, output.headers[_xascsi]],
    });
    const data = await smithyClient.collectBody(output.body, context);
    contents.Body = data;
    return contents;
};
const de_InvokeEndpointAsyncCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_OL]: [, output.headers[_xaso]],
        [_FL]: [, output.headers[_xasf]],
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        InferenceId: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_InvokeEndpointWithResponseStreamCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_CT]: [, output.headers[_xasct]],
        [_IPV]: [, output.headers[_xaipv]],
        [_CA]: [, output.headers[_xasca]],
    });
    const data = output.body;
    contents.Body = de_ResponseStream(data, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalDependencyException":
        case "com.amazonaws.sagemakerruntime#InternalDependencyException":
            throw await de_InternalDependencyExceptionRes(parsedOutput);
        case "InternalFailure":
        case "com.amazonaws.sagemakerruntime#InternalFailure":
            throw await de_InternalFailureRes(parsedOutput);
        case "ModelError":
        case "com.amazonaws.sagemakerruntime#ModelError":
            throw await de_ModelErrorRes(parsedOutput);
        case "ModelNotReadyException":
        case "com.amazonaws.sagemakerruntime#ModelNotReadyException":
            throw await de_ModelNotReadyExceptionRes(parsedOutput);
        case "ServiceUnavailable":
        case "com.amazonaws.sagemakerruntime#ServiceUnavailable":
            throw await de_ServiceUnavailableRes(parsedOutput);
        case "ValidationError":
        case "com.amazonaws.sagemakerruntime#ValidationError":
            throw await de_ValidationErrorRes(parsedOutput);
        case "InternalStreamFailure":
        case "com.amazonaws.sagemakerruntime#InternalStreamFailure":
            throw await de_InternalStreamFailureRes(parsedOutput);
        case "ModelStreamError":
        case "com.amazonaws.sagemakerruntime#ModelStreamError":
            throw await de_ModelStreamErrorRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = smithyClient.withBaseException(SageMakerRuntimeServiceException);
const de_InternalDependencyExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalDependencyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_InternalFailureRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalFailure({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_InternalStreamFailureRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalStreamFailure({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ModelErrorRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        LogStreamArn: smithyClient.expectString,
        Message: smithyClient.expectString,
        OriginalMessage: smithyClient.expectString,
        OriginalStatusCode: smithyClient.expectInt32,
    });
    Object.assign(contents, doc);
    const exception = new ModelError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ModelNotReadyExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ModelNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ModelStreamErrorRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        ErrorCode: smithyClient.expectString,
        Message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ModelStreamError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceUnavailableRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceUnavailable({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationErrorRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ResponseStream = (output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["PayloadPart"] != null) {
            return {
                PayloadPart: await de_PayloadPart_event(event["PayloadPart"]),
            };
        }
        if (event["ModelStreamError"] != null) {
            return {
                ModelStreamError: await de_ModelStreamError_event(event["ModelStreamError"], context),
            };
        }
        if (event["InternalStreamFailure"] != null) {
            return {
                InternalStreamFailure: await de_InternalStreamFailure_event(event["InternalStreamFailure"], context),
            };
        }
        return { $unknown: event };
    });
};
const de_InternalStreamFailure_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonBody(output.body, context),
    };
    return de_InternalStreamFailureRes(parsedOutput);
};
const de_ModelStreamError_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonBody(output.body, context),
    };
    return de_ModelStreamErrorRes(parsedOutput);
};
const de_PayloadPart_event = async (output, context) => {
    const contents = {};
    contents.Bytes = output.body;
    return contents;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const _A = "Accept";
const _CA = "CustomAttributes";
const _CSI = "ClosedSessionId";
const _CT = "ContentType";
const _EE = "EnableExplanations";
const _FL = "FailureLocation";
const _ICN = "InferenceComponentName";
const _II = "InferenceId";
const _IL = "InputLocation";
const _IPV = "InvokedProductionVariant";
const _ITS = "InvocationTimeoutSeconds";
const _NSI = "NewSessionId";
const _OL = "OutputLocation";
const _RTTLS = "RequestTTLSeconds";
const _SI = "SessionId";
const _TCH = "TargetContainerHostname";
const _TM = "TargetModel";
const _TV = "TargetVariant";
const _a = "accept";
const _ct = "content-type";
const _xaipv = "x-amzn-invoked-production-variant";
const _xasa = "x-amzn-sagemaker-accept";
const _xasca = "x-amzn-sagemaker-custom-attributes";
const _xascsi = "x-amzn-sagemaker-closed-session-id";
const _xasct = "x-amzn-sagemaker-content-type";
const _xasee = "x-amzn-sagemaker-enable-explanations";
const _xasf = "x-amzn-sagemaker-failurelocation";
const _xasi = "x-amzn-sagemaker-inputlocation";
const _xasi_ = "x-amzn-sagemaker-invocationtimeoutseconds";
const _xasic = "x-amzn-sagemaker-inference-component";
const _xasii = "x-amzn-sagemaker-inference-id";
const _xasnsi = "x-amzn-sagemaker-new-session-id";
const _xaso = "x-amzn-sagemaker-outputlocation";
const _xasr = "x-amzn-sagemaker-requestttlseconds";
const _xassi = "x-amzn-sagemaker-session-id";
const _xastch = "x-amzn-sagemaker-target-container-hostname";
const _xastm = "x-amzn-sagemaker-target-model";
const _xastv = "x-amzn-sagemaker-target-variant";

class InvokeEndpointAsyncCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSageMakerRuntime", "InvokeEndpointAsync", {})
    .n("SageMakerRuntimeClient", "InvokeEndpointAsyncCommand")
    .f(InvokeEndpointAsyncInputFilterSensitiveLog, void 0)
    .ser(se_InvokeEndpointAsyncCommand)
    .de(de_InvokeEndpointAsyncCommand)
    .build() {
}

class InvokeEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSageMakerRuntime", "InvokeEndpoint", {})
    .n("SageMakerRuntimeClient", "InvokeEndpointCommand")
    .f(InvokeEndpointInputFilterSensitiveLog, InvokeEndpointOutputFilterSensitiveLog)
    .ser(se_InvokeEndpointCommand)
    .de(de_InvokeEndpointCommand)
    .build() {
}

class InvokeEndpointWithResponseStreamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSageMakerRuntime", "InvokeEndpointWithResponseStream", {
    eventStream: {
        output: true,
    },
})
    .n("SageMakerRuntimeClient", "InvokeEndpointWithResponseStreamCommand")
    .f(InvokeEndpointWithResponseStreamInputFilterSensitiveLog, InvokeEndpointWithResponseStreamOutputFilterSensitiveLog)
    .ser(se_InvokeEndpointWithResponseStreamCommand)
    .de(de_InvokeEndpointWithResponseStreamCommand)
    .build() {
}

const commands = {
    InvokeEndpointCommand,
    InvokeEndpointAsyncCommand,
    InvokeEndpointWithResponseStreamCommand,
};
class SageMakerRuntime extends SageMakerRuntimeClient {
}
smithyClient.createAggregatedClient(commands, SageMakerRuntime);

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.InternalDependencyException = InternalDependencyException;
exports.InternalFailure = InternalFailure;
exports.InternalStreamFailure = InternalStreamFailure;
exports.InvokeEndpointAsyncCommand = InvokeEndpointAsyncCommand;
exports.InvokeEndpointAsyncInputFilterSensitiveLog = InvokeEndpointAsyncInputFilterSensitiveLog;
exports.InvokeEndpointCommand = InvokeEndpointCommand;
exports.InvokeEndpointInputFilterSensitiveLog = InvokeEndpointInputFilterSensitiveLog;
exports.InvokeEndpointOutputFilterSensitiveLog = InvokeEndpointOutputFilterSensitiveLog;
exports.InvokeEndpointWithResponseStreamCommand = InvokeEndpointWithResponseStreamCommand;
exports.InvokeEndpointWithResponseStreamInputFilterSensitiveLog = InvokeEndpointWithResponseStreamInputFilterSensitiveLog;
exports.InvokeEndpointWithResponseStreamOutputFilterSensitiveLog = InvokeEndpointWithResponseStreamOutputFilterSensitiveLog;
exports.ModelError = ModelError;
exports.ModelNotReadyException = ModelNotReadyException;
exports.ModelStreamError = ModelStreamError;
exports.PayloadPartFilterSensitiveLog = PayloadPartFilterSensitiveLog;
exports.ResponseStreamFilterSensitiveLog = ResponseStreamFilterSensitiveLog;
exports.SageMakerRuntime = SageMakerRuntime;
exports.SageMakerRuntimeClient = SageMakerRuntimeClient;
exports.SageMakerRuntimeServiceException = SageMakerRuntimeServiceException;
exports.ServiceUnavailable = ServiceUnavailable;
exports.ValidationError = ValidationError;
